
-------------------------------------------------------------------------------
-- ¡¡¡ NO CORRER ESTE SCRIPT DIRECTAMENTE, LEER LAS INSTRUCCIONES PRIMERO !!!
-------------------------------------------------------------------------------


-- (1)  CORREGIR LA COLUMNA regla_id EN TABLA clin_far_reglas PARA QUE QUEDE 
--      COMO AUTOINCREMENTAL

-- (1.1) Revisar que filas estan duplicadas por "regla_id". Se deben eliminar o 
-- corregir todas las filas duplicadas. La siguiente query se puede usar para 
-- ver que filas estan duplicadas: 
SELECT regla_id, COUNT(*) FROM clin_far_reglas GROUP BY regla_id HAVING COUNT(*) > 1;

-- (1.2) Crear una secuencia para la columna "regla_id". En QA colocar en el 
-- "START WITH" un 1 ya que todas las filas tienen 1. En produccion, el ultimo
-- valor en la tabla + 1
CREATE SEQUENCE clin_far_reglas_regla_id_seq
    START WITH <PRODUCCION: ultimo_regla_id + 1; QA: 1>
    INCREMENT BY 1
    CACHE 10;

-- (1.3) Colocar la columna "regla_id" como llave primaria de la tabla
ALTER TABLE clin_far_reglas ADD CONSTRAINT pk_clin_far_reglas PRIMARY KEY( regla_id );

-- (1.4) Agregar el trigger para que regla_id se incremente automaticamente
CREATE OR REPLACE TRIGGER clin_far_reglas_asignar_regla_id BEFORE
    INSERT ON clin_far_reglas
    FOR EACH ROW
BEGIN
    :new.regla_id := clin_far_reglas_regla_id_seq.nextval;
END;


-- (2) AGREGAR RESTRICCION DE QUE HES Y CODIGO SERVICIO SON UNICOS

-- (2.1) Hacer que el codigo de servicio no sea null. Hay que eliminar los que
-- tengan NULL antes de hacer el cambio
ALTER TABLE clin_far_reglas MODIFY ( codigo_servicio NOT NULL);

-- (2.2) Seleccionar todos los servicios duplicados en la tabla clin_far_reglas 
-- y eliminarlos. Tiene que ser a mano para ver cual fila es la correcta
SELECT codigo_servicio, regla_hdgcodigo, regla_esacodigo, regla_cmecodigo, COUNT(*)
FROM clin_far_reglas
GROUP BY codigo_servicio, regla_hdgcodigo, regla_esacodigo, regla_cmecodigo
HAVING COUNT(*) > 1;

-- (2.3) Crear la restriccion UNIQUE sobre el codigo de servicio y el HES
ALTER TABLE clin_far_reglas ADD CONSTRAINT servicio_y_hes_unico UNIQUE ( codigo_servicio, regla_hdgcodigo, regla_esacodigo, regla_cmecodigo);


-- (3) GENERAR TABLA PARA GUARDAR LOS EVENTOS

CREATE TABLE clin_far_eventos_reglas (
    evento_id   NUMBER(11, 0) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    regla_id    NUMBER(9, 0),
    descripcion VARCHAR2(4000 CHAR) NOT NULL,
    usuario     VARCHAR2(20 CHAR) NOT NULL,
    tipo_evento VARCHAR2(4 CHAR) NOT NULL,
    fecha       DATE DEFAULT sysdate NOT NULL,
    
    CONSTRAINT pk_eventosr_reglas PRIMARY KEY ( evento_id ),
    FOREIGN KEY ( regla_id ) REFERENCES clin_far_reglas ( regla_id ) ON DELETE SET NULL,
    CONSTRAINT descripcion_es_json CHECK (descripcion IS JSON),
    CONSTRAINT evento_valido CHECK (tipo_evento in ('C', 'M'))
);

COMMENT ON COLUMN "FARMACIACLINICA"."CLIN_FAR_EVENTOS_REGLAS"."EVENTO_ID" IS 'ID del evento. No es necesario especificarlo al momento de crear una fila, se autoincrementa solo';
COMMENT ON COLUMN "FARMACIACLINICA"."CLIN_FAR_EVENTOS_REGLAS"."REGLA_ID" IS 'ID de la regla en tabla CLIN_FAR_REGLAS asociada a este evento. Si es NULL es porque la regla fue eliminada';
COMMENT ON COLUMN "FARMACIACLINICA"."CLIN_FAR_EVENTOS_REGLAS"."DESCRIPCION" IS 'Cambios realizados a la regla. Es un JSON cuya estructura esta en el GO, en archivo descripcionEventoModificarReglas.go';
COMMENT ON COLUMN "FARMACIACLINICA"."CLIN_FAR_EVENTOS_REGLAS"."USUARIO" IS 'Nombre del usuario que realizó los cambios';
COMMENT ON COLUMN "FARMACIACLINICA"."CLIN_FAR_EVENTOS_REGLAS"."TIPO_EVENTO" IS '"C" si se creó la regla, "M" si es que se modificó';
COMMENT ON COLUMN "FARMACIACLINICA"."CLIN_FAR_EVENTOS_REGLAS"."FECHA" IS 'Timestamp de cuando ocurrio el evento. No es necesario especificarlo al momento de crear un evento, se completa solo';